rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRequiredFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    function isValidData() {
      return request.resource.data.size() <= 10000; // Limit document size to 10MB
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    match /services/{serviceId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() 
        && hasRequiredFields(['title', 'description', 'price', 'category'])
        && isValidData();
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if true; // Public read access
      allow write: if false; // Only admin can write (handled through admin SDK)
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() 
        && hasRequiredFields(['rating', 'comment', 'serviceId'])
        && isValidData();
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() 
        && (resource.data.senderId == request.auth.uid 
            || resource.data.receiverId == request.auth.uid);
      allow create: if isAuthenticated() 
        && request.resource.data.senderId == request.auth.uid
        && hasRequiredFields(['content', 'receiverId'])
        && isValidData();
      allow update: if false; // Messages cannot be updated
      allow delete: if isOwner(resource.data.senderId);
    }

    match /notifications/{notificationId} {
      allow read: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && hasRequiredFields(['type', 'message'])
        && isValidData();
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
} 
