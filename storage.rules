rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*')
        && request.resource.size <= 5 * 1024 * 1024; // 5MB
    }
    
    function isValidDocument() {
      return request.resource.contentType.matches('application/pdf')
        && request.resource.size <= 10 * 1024 * 1024; // 10MB
    }

    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public read access for profile images
      allow create: if isOwner(userId) 
        && isValidImage();
      allow update: if isOwner(userId) 
        && isValidImage();
      allow delete: if isOwner(userId);
    }

    // Service images
    match /services/{serviceId}/images/{fileName} {
      allow read: if true; // Public read access for service images
      allow create: if isAuthenticated() 
        && isValidImage();
      allow update: if isAuthenticated() 
        && isValidImage();
      allow delete: if isAuthenticated();
    }

    // Service documents
    match /services/{serviceId}/documents/{fileName} {
      allow read: if true; // Public read access for service documents
      allow create: if isAuthenticated() 
        && isValidDocument();
      allow update: if isAuthenticated() 
        && isValidDocument();
      allow delete: if isAuthenticated();
    }

    // Review images
    match /reviews/{reviewId}/images/{fileName} {
      allow read: if true; // Public read access for review images
      allow create: if isAuthenticated() 
        && isValidImage();
      allow update: if isAuthenticated() 
        && isValidImage();
      allow delete: if isAuthenticated();
    }

    // Message attachments
    match /messages/{messageId}/attachments/{fileName} {
      allow read: if isAuthenticated(); // Only authenticated users can read attachments
      allow create: if isAuthenticated() 
        && (request.resource.contentType.matches('image/.*') 
            || request.resource.contentType.matches('application/pdf'))
        && request.resource.size <= 5 * 1024 * 1024; // 5MB
      allow update: if false; // No updates allowed
      allow delete: if isAuthenticated();
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 